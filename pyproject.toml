[project]
authors = [
  { name = "Cody Fincher", email = "cody@litestar.dev" },
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Web Environment",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python",
  "Topic :: Software Development",
  "Typing :: Typed",
  "Intended Audience :: Developers",
  "Intended Audience :: System Administrators",
  "Topic :: Database",
  "Topic :: Database :: Database Engines/Servers",
]
dependencies = [
  "litestar>=2.0.29",
  "asyncpg>=0.28.0",
  "typing-extensions"
]
description = "Asyncpg plugin for Litestar"
keywords = ["litestar", "asyncpg"]
license = { text = "MIT" }
name = "litestar-asyncpg"
readme = "README.md"
requires-python = ">=3.9"
version = "0.4.0"

[project.urls]
Changelog = "https://litestar-org.github.io/litesatr-asyncpg/latest/changelog"
Discord = "https://discord.gg/X3FJqy8d2j"
Documentation = "https://litestar-org.github.io/litesatr-asyncpg/latest/"
Homepage = "https://litestar-org.github.io/litesatr-asyncpg/latest/"
Issue = "https://github.com/litestar-org/litestar-asyncpg/issues/"
Source = "https://github.com/litestar-org/litestar-asyncpg"


[dependency-groups]
docs = [
  "sphinx>=7.1.2",
  "sphinx-autobuild>=2021.3.14",
  "sphinx-copybutton>=0.5.2",
  "sphinx-click>=5.0.1",
  "sphinx-toolbox>=3.5.0",
  "sphinx-design>=0.5.0",
  "sphinx-paramlinks>=0.6.0",
  "sphinx-togglebutton>=0.3.2",
  "litestar-sphinx-theme @ git+https://github.com/litestar-org/litestar-sphinx-theme.git@v3",
  "auto-pytabs[sphinx]>=0.4.0",
]
lint = [
  "pre-commit",
  "asyncpg_stubs",
  "mypy",
  "ruff",
  "types-click",
  "pyright",
  "slotscheck"
]
test = [
  "pytest",
  "anyio",
  "pytest-cov",
  "coverage",
  "pytest-mock",
  "pytest-sugar",
  "pytest-databases[postgres]",
  "pytest-xdist"
]
dev = [
  { include-group = "lint" },
  { include-group = "docs" },
  { include-group = "test" }
]

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.pytest.ini_options]
addopts = "-ra"
filterwarnings = [
  "ignore::DeprecationWarning:pkg_resources",
  "ignore::DeprecationWarning:google.*",
  "ignore::DeprecationWarning:passlib.*",
  "ignore::DeprecationWarning:aiosql.*",
  "ignore::DeprecationWarning:litestar.constants.*",
  "ignore::DeprecationWarning:litestar.utils.*",
]
testpaths = ["tests"]

[tool.coverage.run]
concurrency = ["multiprocessing"]
omit = [
  "*/tests/*"
]
parallel = true

[tool.coverage.report]
exclude_lines = [
  'pragma: no cover',
  'if TYPE_CHECKING:',
  'except ImportError as e:',
  'except ImportError:',
  '\.\.\.',
  'raise NotImplementedError',
  'if VERSION.startswith("1"):',
  'if pydantic.VERSION.startswith("1"):',
]
omit = ["*/tests/*"]
show_missing = true

[tool.mypy]
packages = ["litestar_asyncpg", "tests"]
python_version = "3.9"
disallow_any_generics = false
disallow_untyped_decorators = true
enable_error_code = "ignore-without-code"
implicit_reexport = false
show_error_codes = true
strict = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "orjson",
  "re2",
  "re2.*",
  "uvicorn.*",
  "googleapiclient",
  "googleapiclient.*",
  "uvloop.*",
  "asyncmy",
  "asyncmy.*",
  "pyarrow",
  "pyarrow.*",
]

[tool.pyright]
disableBytesTypePromotions = true
exclude = ["**/node_modules", "**/__pycache__", ".venv", "tools", "docs"]
include = ["litestar_asyncpg", "tests"]
pythonVersion = "3.9"
reportMissingTypeStubs = false
reportPrivateImportUsage = false
reportPrivateUsage = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownVariableType = false
reportUnnecessaryTypeIgnoreComments = true
root = "."

[tool.slotscheck]
strict-imports = false

[tool.ruff]
exclude = [".venv", "node_modules"]
line-length = 120
src = ["litestar_asyncpg", "tests", "docs"]
target-version = "py39"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 60

[tool.ruff.lint]
extend-safe-fixes = ["TC"]
fixable = ["ALL"]
ignore = [
  "A003",    # flake8-builtins - class attribute {name} is shadowing a python builtin
  "B010",    # flake8-bugbear - do not call setattr with a constant attribute value
  "D100",    # pydocstyle - missing docstring in public module
  "D101",    # pydocstyle - missing docstring in public class
  "D102",    # pydocstyle - missing docstring in public method
  "D103",    # pydocstyle - missing docstring in public function
  "D104",    # pydocstyle - missing docstring in public package
  "D105",    # pydocstyle - missing docstring in magic method
  "D106",    # pydocstyle - missing docstring in public nested class
  "D107",    # pydocstyle - missing docstring in __init__
  "D202",    # pydocstyle - no blank lines allowed after function docstring
  "D205",    # pydocstyle - 1 blank line required between summary line and description
  "D415",    # pydocstyle - first line should end with a period, question mark, or exclamation point
  "E501",    # pycodestyle line too long, handled by ruff format
  "PLW2901", # pylint - for loop variable overwritten by assignment target
  "RUF012",  # Ruff-specific rule - annotated with classvar
  "ISC001",  # Ruff formatter incompatible
  "A005",    # flake8 - Module `x` shadows a Python standard-library module
  "PLC0415", # pylint - `import` should be at the top of the file
  "FA100",   # Add `from __future__ import annotations` to simplify
  "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
  "FBT001",  # Boolean-typed positional argument in function definition
  "FBT002",  # Boolean default positional argument in function definition
  "PLR0913", # pylint - Too many arguments in function definition
  "ARG002",  # Unused method argument
  "ARG001",  # Unused function argument
  "CPY001",  # pycodestyle - Missing Copywrite notice at the top of the file
  "RUF029",  # Ruff - function is declared as async but has no awaitable calls
  "COM812",  # flake8-comma - Missing trailing comma
  "PGH003",  # Use Specific ignore for pyright
]
select = ["ALL"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod"]

[tool.ruff.lint.isort]
known-first-party = ["litestar_asyncpg", "tests"]

[tool.ruff.lint.per-file-ignores]
"docs/**/*.*" = ["S", "B", "DTZ", "A", "TC", "ERA", "D", "RET", "PLW0127"]
"docs/examples/**" = ["T201"]
"tests/**/*.*" = [
  "A",
  "ARG",
  "B",
  "BLE",
  "C901",
  "D",
  "DTZ",
  "EM",
  "FBT",
  "G",
  "N",
  "PGH",
  "PIE",
  "PLR",
  "PLW",
  "PTH",
  "RSE",
  "S",
  "S101",
  "SIM",
  "TC",
  "TRY",
  "PT012",
  "INP001",
  "DOC",
  "PLC",
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"
